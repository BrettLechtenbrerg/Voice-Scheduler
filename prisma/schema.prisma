// Voice Scheduler Database Schema
// Multi-tenant SaaS application with user workspaces and contact management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // For production, consider using PostgreSQL:
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
}

// User model - integrated with NextAuth
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User role and permissions
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  
  // Workspace relationship
  workspaces    UserWorkspace[]
  
  // NextAuth required relationships
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

// Workspace model for multi-tenancy
model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Workspace settings
  isActive    Boolean  @default(true)
  settings    Json?    // Store workspace-specific settings
  
  // Usage tracking
  contactCount Int     @default(0)
  
  // Relationships
  users       UserWorkspace[]
  contacts    Contact[]
  
  @@map("workspaces")
}

// Junction table for user-workspace relationships
model UserWorkspace {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

// Contact model - workspace isolated
model Contact {
  id          String   @id @default(cuid())
  workspaceId String
  
  // Contact information
  name        String
  phone       String
  email       String?
  company     String?
  notes       String?
  
  // Metadata
  source      String   @default("voice_scheduler")
  transcription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Processing status
  status      ContactStatus @default(PENDING)
  
  // Relationships
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@map("contacts")
}

// Usage tracking for analytics
model UsageLog {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String?
  action      String    // "transcribe", "submit_contact", etc.
  metadata    Json?     // Additional tracking data
  createdAt   DateTime  @default(now())
  
  @@map("usage_logs")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ContactStatus {
  PENDING
  PROCESSED
  FAILED
}
